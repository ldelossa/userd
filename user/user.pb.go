// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	ID
	Empty
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id       string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username string         `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string         `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Email    string         `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Fname    string         `protobuf:"bytes,5,opt,name=fname" json:"fname,omitempty"`
	Mname    string         `protobuf:"bytes,6,opt,name=mname" json:"mname,omitempty"`
	Lname    string         `protobuf:"bytes,7,opt,name=lname" json:"lname,omitempty"`
	Location *User_Location `protobuf:"bytes,8,opt,name=location" json:"location,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetFname() string {
	if m != nil {
		return m.Fname
	}
	return ""
}

func (m *User) GetMname() string {
	if m != nil {
		return m.Mname
	}
	return ""
}

func (m *User) GetLname() string {
	if m != nil {
		return m.Lname
	}
	return ""
}

func (m *User) GetLocation() *User_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type User_Location struct {
	State       string  `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	City        string  `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	Zipcode     int32   `protobuf:"varint,3,opt,name=zipcode" json:"zipcode,omitempty"`
	Phonenumber string  `protobuf:"bytes,4,opt,name=phonenumber" json:"phonenumber,omitempty"`
	Lat         float32 `protobuf:"fixed32,5,opt,name=lat" json:"lat,omitempty"`
	Long        float32 `protobuf:"fixed32,6,opt,name=long" json:"long,omitempty"`
}

func (m *User_Location) Reset()                    { *m = User_Location{} }
func (m *User_Location) String() string            { return proto.CompactTextString(m) }
func (*User_Location) ProtoMessage()               {}
func (*User_Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *User_Location) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *User_Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *User_Location) GetZipcode() int32 {
	if m != nil {
		return m.Zipcode
	}
	return 0
}

func (m *User_Location) GetPhonenumber() string {
	if m != nil {
		return m.Phonenumber
	}
	return ""
}

func (m *User_Location) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *User_Location) GetLong() float32 {
	if m != nil {
		return m.Long
	}
	return 0
}

type ID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*User_Location)(nil), "user.User.Location")
	proto.RegisterType((*ID)(nil), "user.ID")
	proto.RegisterType((*Empty)(nil), "user.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserGRPC service

type UserGRPCClient interface {
	// Add a user to our service
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// Get a user by ID (email, username, unique ID)
	GetUserByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error)
	// Delete a user by ID (email, username, unique ID)
	DeleteUserByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
}

type userGRPCClient struct {
	cc *grpc.ClientConn
}

func NewUserGRPCClient(cc *grpc.ClientConn) UserGRPCClient {
	return &userGRPCClient{cc}
}

func (c *userGRPCClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/user.UserGRPC/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGRPCClient) GetUserByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/user.UserGRPC/GetUserByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGRPCClient) DeleteUserByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/user.UserGRPC/DeleteUserByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserGRPC service

type UserGRPCServer interface {
	// Add a user to our service
	AddUser(context.Context, *User) (*User, error)
	// Get a user by ID (email, username, unique ID)
	GetUserByID(context.Context, *ID) (*User, error)
	// Delete a user by ID (email, username, unique ID)
	DeleteUserByID(context.Context, *ID) (*Empty, error)
}

func RegisterUserGRPCServer(s *grpc.Server, srv UserGRPCServer) {
	s.RegisterService(&_UserGRPC_serviceDesc, srv)
}

func _UserGRPC_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGRPC/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGRPC_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGRPC/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServer).GetUserByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGRPC_DeleteUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGRPCServer).DeleteUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserGRPC/DeleteUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGRPCServer).DeleteUserByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserGRPC",
	HandlerType: (*UserGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserGRPC_AddUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserGRPC_GetUserByID_Handler,
		},
		{
			MethodName: "DeleteUserByID",
			Handler:    _UserGRPC_DeleteUserByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x9b, 0x6d, 0xd2, 0xc4, 0x09, 0x14, 0x19, 0x7b, 0x08, 0x3d, 0x95, 0x88, 0x50, 0x2f,
	0x15, 0xea, 0x13, 0xa8, 0x91, 0x52, 0xf0, 0x20, 0x01, 0x1f, 0x20, 0x6d, 0x46, 0x0d, 0x64, 0xb3,
	0x21, 0xd9, 0x22, 0xf5, 0xe6, 0x4b, 0xf8, 0x9c, 0x3e, 0x82, 0xec, 0x6c, 0x52, 0x4b, 0xf1, 0xf6,
	0xff, 0xdf, 0x0c, 0x9b, 0xfd, 0x92, 0x00, 0xec, 0x5a, 0x6a, 0x16, 0x75, 0xa3, 0xb4, 0x42, 0xd7,
	0xe4, 0xf8, 0x47, 0x80, 0xfb, 0xd2, 0x52, 0x83, 0x63, 0x10, 0x45, 0x1e, 0x39, 0x33, 0x67, 0x7e,
	0x96, 0x8a, 0x22, 0xc7, 0x29, 0x04, 0x66, 0xa1, 0xca, 0x24, 0x45, 0x82, 0xe9, 0xa1, 0x9b, 0x59,
	0x9d, 0xb5, 0xed, 0x87, 0x6a, 0xf2, 0x68, 0x68, 0x67, 0x7d, 0xc7, 0x09, 0x78, 0x24, 0xb3, 0xa2,
	0x8c, 0x5c, 0x1e, 0xd8, 0x62, 0xe8, 0x2b, 0x1f, 0xe5, 0x59, 0xca, 0xc5, 0x50, 0xc9, 0x74, 0x64,
	0xa9, 0xec, 0x69, 0xc9, 0xd4, 0xb7, 0x94, 0x0b, 0xde, 0x40, 0x50, 0xaa, 0x6d, 0xa6, 0x0b, 0x55,
	0x45, 0xc1, 0xcc, 0x99, 0x87, 0xcb, 0x8b, 0x05, 0xdb, 0x98, 0xdb, 0x2f, 0x9e, 0xba, 0x51, 0x7a,
	0x58, 0x9a, 0x7e, 0x3b, 0x10, 0xf4, 0xd8, 0x9c, 0xd9, 0xea, 0x4c, 0x53, 0x27, 0x68, 0x0b, 0x22,
	0xb8, 0xdb, 0x42, 0xef, 0x3b, 0x3f, 0xce, 0x18, 0x81, 0xff, 0x59, 0xd4, 0x5b, 0x95, 0x13, 0xab,
	0x79, 0x69, 0x5f, 0x71, 0x06, 0x61, 0xfd, 0xae, 0x2a, 0xaa, 0x76, 0x72, 0x43, 0x4d, 0xe7, 0x77,
	0x8c, 0xf0, 0x1c, 0x86, 0x65, 0xa6, 0xd9, 0x51, 0xa4, 0x26, 0x9a, 0x27, 0x94, 0xaa, 0x7a, 0x63,
	0x41, 0x91, 0x72, 0x8e, 0x27, 0x20, 0xd6, 0xc9, 0xe9, 0xfb, 0x8e, 0x7d, 0xf0, 0x1e, 0x65, 0xad,
	0xf7, 0xcb, 0x2f, 0x07, 0x02, 0xe3, 0xb4, 0x4a, 0x9f, 0x1f, 0xf0, 0x12, 0xfc, 0xbb, 0x3c, 0xe7,
	0x0f, 0x04, 0x7f, 0xba, 0xd3, 0xa3, 0x1c, 0x0f, 0xf0, 0x0a, 0xc2, 0x15, 0x69, 0x53, 0xee, 0xf7,
	0xeb, 0x04, 0x03, 0x3b, 0x5c, 0x27, 0x27, 0x6b, 0xd7, 0x30, 0x4e, 0xa8, 0x24, 0x4d, 0xff, 0x6c,
	0x86, 0x36, 0xf1, 0x0d, 0xe2, 0xc1, 0x66, 0xc4, 0xbf, 0xc8, 0xed, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xd9, 0x43, 0x21, 0xbf, 0x30, 0x02, 0x00, 0x00,
}
